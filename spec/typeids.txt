#TypeID	Name

## Fundamental

0	scijava.roi.types.Null
1	scijava.roi.types.TypeID

## Integer numbers

10	scijava.roi.types.UInt8
11	scijava.roi.types.UInt16
12	scijava.roi.types.UInt32
13	scijava.roi.types.UInt64
#14	scijava.roi.types.UInt128

15	scijava.roi.types.Int8
16	scijava.roi.types.Int16
17	scijava.roi.types.Int32
18	scijava.roi.types.Int64
#19	scijava.roi.types.Int128

## Real numbers

20	scijava.roi.types.Float32
21	scijava.roi.types.Float64
#22	scijava.roi.types.Float128

## Primitive compound types

30	scijava.roi.types.String
31	scijava.roi.types.Color

## Enumerated types

40	scijava.roi.types.Operator
41	scijava.roi.types.BLogic

## Containers

50	scijava.roi.types.Pair
51	scijava.roi.types.Array
52	scijava.roi.types.Set
53	scijava.roi.types.Map
54	scijava.roi.types.DirectedGraph

## Geometry

100	scijava.roi.types.Vertex1D
101	scijava.roi.types.Vertex2D
102	scijava.roi.types.Vertex3D
103	scijava.roi.types.VertexnD

110	scijava.roi.types.Vector1D
111	scijava.roi.types.Vector2D
112	scijava.roi.types.Vector3D
113	scijava.roi.types.VectornD

120	scijava.roi.types.LinePoints1D
121	scijava.roi.types.LinePoints2D
122	scijava.roi.types.LinePoints3D
125	scijava.roi.types.LineVector1D
126	scijava.roi.types.LineVector2D
127	scijava.roi.types.LineVector3D

130	scijava.roi.types.LinesPoints1D
131	scijava.roi.types.LinesPoints2D
132	scijava.roi.types.LinesPoints3D
135	scijava.roi.types.LinesVectors1D
136	scijava.roi.types.LinesVectors2D
137	scijava.roi.types.LinesVectors3D

140	scijava.roi.types.PolylinePoints1D
141	scijava.roi.types.PolylinePoints2D
142	scijava.roi.types.PolylinePoints3D
145	scijava.roi.types.PolylineVector1D
146	scijava.roi.types.PolylineVector2D
147	scijava.roi.types.PolylineVector3D

150	scijava.roi.types.AlignedSquare1
151	scijava.roi.types.AlignedSquare2

155	scijava.roi.types.AlignedRectangle1
156	scijava.roi.types.AlignedRectangle2

160	scijava.roi.types.AlignedCube1
161	scijava.roi.types.AlignedCube2

165	scijava.roi.types.AlignedCuboid1
166	scijava.roi.types.AlignedCuboid2

170	scijava.roi.types.Square1
171	scijava.roi.types.Square2

175	scijava.roi.types.Rectangle1
176	scijava.roi.types.Rectangle2

180	scijava.roi.types.Cube1
181	scijava.roi.types.Cube2

185	scijava.roi.types.Cuboid1
186	scijava.roi.types.Cuboid2

200	scijava.roi.types.Circle0
201	scijava.roi.types.Circle1
202	scijava.roi.types.Circle2
203	scijava.roi.types.Circle3
204	scijava.roi.types.Circle4
205	scijava.roi.types.Circle5

210	scijava.roi.types.Sphere0
211	scijava.roi.types.Sphere1
212	scijava.roi.types.Sphere2
213	scijava.roi.types.Sphere3
214	scijava.roi.types.Sphere4
215	scijava.roi.types.Sphere5
216	scijava.roi.types.Sphere6

220	scijava.roi.types.AlignedHalfAxes2D
221	scijava.roi.types.AlignedHalfAxes3D
225	scijava.roi.types.HalfAxes2D
226	scijava.roi.types.HalfAxes3D

# A basic circular cylinder with faces at right angles.
230	scijava.roi.types.CircularCylinder1
# A basic circular cylinder with faces at right angles.
231	scijava.roi.types.CircularCylinder2
# Face angles other than right-angles let chains of cylinders be used
# for tubular structures without gaps at the joins.
232	scijava.roi.types.CircularCylinder3
# Face angles other than right-angles let chains of cylinders be used
# for tubular structures without gaps at the joins.
233	scijava.roi.types.CircularCylinder4


# A basic elliptic cylinder with faces at right angles.
240	scijava.roi.types.EllipticCylinder1
# A basic elliptic cylinder with faces at right angles.
241	scijava.roi.types.EllipticCylinder2
# Face angles other than right-angles let chains of cylinders be used
# for tubular structures without gaps at the joins.
242	scijava.roi.types.EllipticCylinder3
# Face angles other than right-angles let chains of cylinders be used
# for tubular structures without gaps at the joins.
243	scijava.roi.types.EllipticCylinder4

## Arcs
250	scijava.roi.types.Arc12D
251	scijava.roi.types.Arc13D
252	scijava.roi.types.Arc22D
253	scijava.roi.types.Arc23D
254	scijava.roi.types.Arc32D
255	scijava.roi.types.Arc33D

# The mask is applied to the bounding line.  Dimensions specify the
# x size of the mask.  DATA is the mask pixel data.
500	scijava.roi.types.AlignedBitMask1D
# The mask is applied to the aligned bounding rectangle.  Dimensions specify the
# x and y size of the mask.  DATA is the mask pixel data.
501	scijava.roi.types.AlignedBitMask2D
# The mask is applied to the aligned bounding cuboid.  Dimensions specify the
# x, y and z size of the mask.  DATA is the mask pixel data.
502	scijava.roi.types.AlignedBitMask3D
# The mask is applied to the aligned bounding line.  Dimensions specify the
# x size of the mask.  DATA is the mask pixel data.
510	scijava.roi.types.AlignedGreyMask1D
# The mask is applied to the aligned bounding rectangle.  Dimensions specify the
# x and y size of the mask.  DATA is the mask pixel data.
511	scijava.roi.types.AlignedGreyMask2D
# The mask is applied to the aligned bounding cuboid.  Dimensions specify the
# x, y and z size of the mask.  DATA is the mask pixel data.
512	scijava.roi.types.AlignedGreyMask3D


# The mask is applied to the bounding rectangle.  Dimensions specify the
# x and y size of the mask.  DATA is the mask pixel data.
520	scijava.roi.types.BitMask2D
# The mask is applied to the bounding cuboid.  Dimensions specify the
# x, y and z size of the mask.  DATA is the mask pixel data.
521	scijava.roi.types.BitMask3D
# The mask is applied to the bounding rectangle.  Dimensions specify the
# x and y size of the mask.  DATA is the mask pixel data.
530	scijava.roi.types.GreyMask2D
# The mask is applied to the bounding cuboid.  Dimensions specify the
# x, y and z size of the mask.  DATA is the mask pixel data.
531	scijava.roi.types.GreyMask3D

# Vertex references are indexes into the VERTS array.  Vertex-face
# mapping is implied, and will require the implementor to construct the
# mapping.
600	scijava.roi.types.Mesh2D
# Vertex references are indexes into the VERTS array.  Vertex-face
# mapping is implied, and will require the implementor to construct the
# mapping.
601	scijava.roi.types.Mesh3D

## Custom ROI

## Custom (user-definable) shapes

# The custom shape type, unlike other shapes, does not define any
# intrinsic behaviour.  This is entirely the responsibility of the
# user.  The typename of the shape is specified by the user, which
# provides an extension mechanism by allowing this type to be used to
# specify an arbitrary number of shape types.
#
# The shape contains four sets of shapes for measurement, results,
# editing and visualisation.  The intent here is that the shapes
# required for the user to visualise the ROI are contained in the
# VISUAL set.  This will permit the ROI to be transported to other
# systems, and allow visualisation without any knowledge of the
# specific ROI type.  The other types are optional, and may be used as
# the user sees fit.  MEASUREMENTS is intended to store any points or
# other informations used when defining the ROI (which are not already
# contained in the VISUAL set).  RESULTS is intended to store any
# measurements which are not directly derivable from the other sets.
# EDIT is intended for storing label offsets, construction lines, and
# any other information used for editing which is not contained in
# the MEASUREMENTS or VISUAL sets.

650	scijava.roi.shape.Custom

## Transformations

700	scijava.roi.types.AffineTransform1D
701	scijava.roi.types.AffineTransform2D
702	scijava.roi.types.AffineTransform3D
703	scijava.roi.types.AffineTransformnD

710	scijava.roi.types.TranslateTransform1D
711	scijava.roi.types.TranslateTransform2D
712	scijava.roi.types.TranslateTransform3D
713	scijava.roi.types.ScaleTransform1D
714	scijava.roi.types.ScaleTransform2D
715	scijava.roi.types.ScaleTransform3D
716	scijava.roi.types.RotateTransform2D
717	scijava.roi.types.RotateTransform3D
720	scijava.roi.types.AbstractTransform1D
721	scijava.roi.types.AbstractTransform2D
722	scijava.roi.types.AbstractTransform3D

88	scijava.roi.types.ValuesnD
89	scijava.roi.types.Range1nD
# Specified as all values for which the formula “n O1 V1” is true, e.g. “n ≤ 5”.
90	scijava.roi.types.Range2nD
91	scijava.roi.types.Extrude
93	scijava.roi.types.ShapeSet
94	scijava.roi.types.Bitwise1D
95	scijava.roi.types.Bitwise2D
96	scijava.roi.types.Bitwise3D

#150	scijava.roi.types.ROI
#151	scijava.roi.types.ROISet




## Annotations

# Text in 3D will need to be based upon a rectangle in 3D (not yet
# possible without a transform).  Should label alignment be specified
# directly in the representation, or in higher-level metadata?
1000	scijava.roi.annotation.Text
1001	scijava.roi.annotation.Scale
# TODO: Specify grid spacing
1002	scijava.roi.annotation.Grid

### Shapes

## 3D geometric forms with no intrinsic volume

2000	scijava.roi.shape.Point
2001	scijava.roi.shape.Points
2002	scijava.roi.shape.Line
2003	scijava.roi.shape.Lines
2004	scijava.roi.shape.Polyline
2005	scijava.roi.shape.Polygon
2006	scijava.roi.shape.PolylineSpline
2007	scijava.roi.shape.PolygonSpline
2008	scijava.roi.shape.Arc

## 3D geometric forms with intrinsic volume

2020	scijava.roi.shape.Cuboid
2021	scijava.roi.shape.Ellipsoid
2022	scijava.roi.shape.Cylinder
2023	scijava.roi.shape.Mesh

## 3D pixel data

# A bitmask may be aligned with the axes (with an aligned bounding
# box) or unaligned (with an unaligned bounding box).  In order to
# iterate over the mask with a 1:1 correspondence between mask and
# underlying image pixel data, it must be converted to an aligned
# form.  Additionally, it must be converted to an aligned form with
# the samples aligned with the pixel grid.

2040	scijava.roi.shape.BitMask

# A greymask may be aligned with the axes (with an aligned bounding
# box) or unaligned (with an unaligned bounding box).  In order to
# iterate over the mask with a 1:1 correspondence between mask and
# underlying image pixel data, it must be converted to an aligned
# form.  Additionally, it must be converted to an aligned form with
# the samples aligned with the pixel grid.

2041	scijava.roi.shape.GreyMask

## 3D transformations and operations

2050	scijava.roi.shape.AffineTransform
2051	scijava.roi.shape.AbstractTransform
2052	scijava.roi.shape.Bitwise

## Grouping

# All operations operate individually upon the contained shapes.  This
# implies that transforms are performed upon each shape, with rotation
# centres in the centre of each shape.
2060	scijava.roi.shape.Set




### nD constraints

# Constrain region to a single value within a specific dimension.
3000	scijava.roi.dimconstraint.Value
# Constrain region to multiple values within a specific dimension.
3001	scijava.roi.dimconstraint.Values
# Constrain region to a range of values within a specific dimension.
3002	scijava.roi.dimconstraint.Range
# There are no limits in the additional dimension; these must be set
# by combining with a range instead.

## nD transformations and shape operations

3010	scijava.roi.dimconstraint.ExtrudeDim
# The result is a shape combining all subset dimensions.
# It is illegal to have a common dimension between the two shapes.
3011	scijava.roi.dimconstraint.DimConstraintSet

3020	scijava.roi.types.DimConstraint
3021	scijava.roi.types.DimConstraintSet


# We could use an RShape representation here so that we could set a shape as a property.

4000	scijava.roi.types.Properties
